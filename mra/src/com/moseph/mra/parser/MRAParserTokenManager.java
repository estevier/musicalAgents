/* Generated By:JavaCC: Do not edit this line. MRAParserTokenManager.java */
package com.moseph.mra.parser;
import com.moseph.mra.*;
import com.moseph.mra.logic.*;
import java.io.FileInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Vector;
import java.util.List;

public class MRAParserTokenManager implements MRAParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStartNfaWithStates_0(0, 7, 102);
      case 41:
         return jjStopAtPos(0, 8);
      case 44:
         return jjStopAtPos(0, 12);
      case 58:
         return jjStopAtPos(0, 9);
      case 123:
         return jjStopAtPos(0, 10);
      case 125:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   @SuppressWarnings("unused") int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 102;
   int i = 1;
   jjstateSet[0] = startState;
   @SuppressWarnings("unused") int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 102:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(94, 101);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(85, 93);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(69, 84);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(59, 68);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(52, 58);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(44, 51);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(38, 43);
                  break;
               case 0:
                  if ((0x3ff200800000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 40)
                     jjCheckNAddStates(0, 13);
                  else if (curChar == 47)
                     jjAddStates(14, 15);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 43)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(32, 33);
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 1:
                  if (curChar == 33 && kind > 14)
                     kind = 14;
                  break;
               case 5:
                  if (curChar == 43 && kind > 15)
                     kind = 15;
                  break;
               case 7:
                  if ((0x3ff200800000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 29)
                     kind = 29;
                  break;
               case 11:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 14:
                  if (curChar == 47)
                     jjAddStates(14, 15);
                  break;
               case 15:
                  if (curChar == 42)
                     jjCheckNAddStates(16, 18);
                  break;
               case 16:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 17:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 19:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 20:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(34);
                  break;
               case 36:
                  if ((0x3ff200800000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (curChar == 40)
                     jjCheckNAddStates(0, 13);
                  break;
               case 38:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(38, 43);
                  break;
               case 44:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(44, 51);
                  break;
               case 52:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(52, 58);
                  break;
               case 59:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(59, 68);
                  break;
               case 69:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(69, 84);
                  break;
               case 85:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(85, 93);
                  break;
               case 94:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(94, 101);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 102:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 100;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 92;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 83;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjCheckNAdd(36);
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if (curChar == 111)
                     jjAddStates(19, 20);
                  else if (curChar == 97)
                     jjAddStates(21, 22);
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 2:
                  if (curChar == 116 && kind > 14)
                     kind = 14;
                  break;
               case 3:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 124 && kind > 16)
                     kind = 16;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 9:
                  jjAddStates(23, 24);
                  break;
               case 12:
                  jjAddStates(25, 26);
                  break;
               case 16:
               case 18:
                  jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  jjAddStates(27, 28);
                  break;
               case 24:
                  if (curChar == 97)
                     jjAddStates(21, 22);
                  break;
               case 25:
                  if (curChar == 100 && kind > 13)
                     kind = 13;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 100 && kind > 15)
                     kind = 15;
                  break;
               case 28:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 111)
                     jjAddStates(19, 20);
                  break;
               case 30:
                  if (curChar == 114 && kind > 13)
                     kind = 13;
                  break;
               case 31:
                  if (curChar == 114 && kind > 16)
                     kind = 16;
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(36);
                  break;
               case 39:
                  if (curChar == 101 && kind > 22)
                     kind = 22;
                  break;
               case 40:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 45:
                  if (curChar == 110 && kind > 23)
                     kind = 23;
                  break;
               case 46:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if (curChar == 110 && kind > 24)
                     kind = 24;
                  break;
               case 54:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 114 && kind > 25)
                     kind = 25;
                  break;
               case 61:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 70:
                  if (curChar == 114 && kind > 26)
                     kind = 26;
                  break;
               case 71:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 110 && kind > 27)
                     kind = 27;
                  break;
               case 87:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if (curChar == 108 && kind > 28)
                     kind = 28;
                  break;
               case 96:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 16:
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(27, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 102 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   38, 43, 44, 51, 52, 58, 59, 68, 69, 84, 85, 93, 94, 101, 15, 21, 
   16, 17, 20, 30, 31, 26, 28, 9, 10, 12, 13, 22, 23, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\50", "\51", "\72", "\173", "\175", 
"\54", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3fffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[102];
private final int[] jjstateSet = new int[204];
protected char curChar;
public MRAParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public MRAParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 102; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  @SuppressWarnings("unused") int kind;
  @SuppressWarnings("unused") Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
