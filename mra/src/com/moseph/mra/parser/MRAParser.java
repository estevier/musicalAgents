/* Generated By:JavaCC: Do not edit this line. MRAParser.java */
package com.moseph.mra.parser;
import com.moseph.mra.*;
import com.moseph.mra.logic.*;
import java.io.FileInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Vector;
import java.util.List;

public class MRAParser implements MRAParserConstants {
        boolean initialised = false;
        static MRAFactory mraFactory;

        public static void main(String args[]) throws ParseException
        {
                String filename = "examples/InC.mra";
                BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                System.out.println( "Opening " + filename );
                try
                {
                        FileInputStream file = new FileInputStream( filename );
                        MRAParser parser = new MRAParser( file );
                        parser.runParser();
                        for( String input = ""; input != null; input = in.readLine() )
                        {
                                if( input.length() > 0 ) filename = "examples/" + input;
                                file = new FileInputStream( filename );
                                parser.ReInit( file );
                                parser.runParser();
                        }
                }
                catch( Exception e )
                {
                        System.err.println( "Could not open file: " + e );
                }
        }

        public Piece runParser()
        {
                try
                {
                        return Piece();
                }
                catch (Exception e) {
                        System.out.println("NOK.");
                        System.out.println( e + "\n" + e.getMessage() );
                        e.printStackTrace();
                        // break;
                        // parser.ReInit(System.in);
                }
                catch (Error e) {
                        System.out.println("Oops.");
                        System.out.println(e.getMessage());
                        // break;
                }
                return null;
        }

  final public void Input() throws ParseException {
         System.out.println( "Input Starting" );
    Piece();
    jj_consume_token(0);
         System.out.println( "Input Finished" );
  }

  final public Piece Piece() throws ParseException {
        Token name;
        Piece p;
        Attribute a;
        @SuppressWarnings("unused") Behaviour d;
        Behaviour aa;
        Action act;
        Section s;
        Decision dec;
    jj_consume_token(PIECE_OPEN);
    name = jj_consume_token(NAME);
         //System.out.println( "Starting section " + name );
                mraFactory = new MRAFactory( name.image );
                p = mraFactory.getPiece();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case SECTION_OPEN:
      case ACTION_OPEN:
      case BEHAVIOUR_OPEN:
      case DECISION_OPEN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2)) {
        s = Section();
                  p.addChild( s );
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEHAVIOUR_OPEN:
          /*
          		LOOKAHEAD(2) c= Channel() 
          		{ p.addChannel( c ); }
          		|*/
                          aa = Behaviour();
                  p.addBehaviour( aa );
          break;
        case ACTION_OPEN:
          act = Action();
                  p.addAction( act );
          break;
        case DECISION_OPEN:
          dec = Decision();
                  p.addDecision( dec );
          break;
        case NAME:
          a = Attribute();
                  p.addAttribute( a );
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(CLOSE);
         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Section Section() throws ParseException {
        Token name;
        Section s;
        Section sc;
        Attribute a;
        Behaviour d;
        Behaviour aa;
        Channel c;
    jj_consume_token(SECTION_OPEN);
    name = jj_consume_token(NAME);
    if (jj_2_3(2)) {
      jj_consume_token(CLOSE);
                            s = mraFactory.getSection( name.image );
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLOSE:
      case NAME:
      case SECTION_OPEN:
      case BEHAVIOUR_OPEN:
      case ACTIVEBEHAVIOUR_OPEN:
      case CHANNEL_HEAD:
                         //System.out.println( "Starting section " + name );
                                s = mraFactory.createSection( name.image );
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NAME:
          case BEHAVIOUR_OPEN:
          case ACTIVEBEHAVIOUR_OPEN:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BEHAVIOUR_OPEN:
            aa = Behaviour();
                                  s.addBehaviour( aa );
            break;
          case ACTIVEBEHAVIOUR_OPEN:
            d = ActiveBehaviour();
                                  s.addBehaviour( d );
            break;
          case NAME:
            a = Attribute();
                                  s.addAttribute( a );
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SECTION_OPEN:
        case CHANNEL_HEAD:
          if (jj_2_2(2)) {
            label_3:
            while (true) {
              c = Channel();
                                                       s.addChannel( c );
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case CHANNEL_HEAD:
                ;
                break;
              default:
                jj_la1[4] = jj_gen;
                break label_3;
              }
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SECTION_OPEN:
              label_4:
              while (true) {
                sc = Section();
                                                         s.addChild( sc );
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SECTION_OPEN:
                  ;
                  break;
                default:
                  jj_la1[5] = jj_gen;
                  break label_4;
                }
              }
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(CLOSE);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         //System.out.println( "Ending Section" + name);
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Behaviour ActiveBehaviour() throws ParseException {
        Token name;
    jj_consume_token(ACTIVEBEHAVIOUR_OPEN);
    name = jj_consume_token(NAME);
    jj_consume_token(CLOSE);
          {if (true) return mraFactory.getBehaviour( name.image );}
    throw new Error("Missing return statement in function");
  }

  final public Decision Decision() throws ParseException {
        Token name;
        ExpressionTerm e;
    jj_consume_token(DECISION_OPEN);
    name = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN:
      e = Expression();
      break;
    case NUMBER:
    case LETTER:
    case NAME:
    case QUOTEDSTR:
      e = Term();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CLOSE);
          {if (true) return mraFactory.createDecision( name.image, e );}
    throw new Error("Missing return statement in function");
  }

  final public Action Action() throws ParseException {
        Token name;
        Attribute a;
    jj_consume_token(ACTION_OPEN);
    name = jj_consume_token(NAME);
          Action act = mraFactory.createAction( name.image );
    label_5:
    while (true) {
      a = Attribute();
                          act.addAttribute( a ) ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(CLOSE);
          {if (true) return act;}
    throw new Error("Missing return statement in function");
  }

  final public Behaviour Behaviour() throws ParseException {
        Token name;
        Decision decision = null;
        Token decisionName;
        ExpressionTerm exp = null;
        Action action;
        Attribute a;
        Token actionName;
    jj_consume_token(BEHAVIOUR_OPEN);
    name = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN:
      exp = Expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_4(2)) {
        exp = Function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          decisionName = jj_consume_token(NAME);
                          decision = mraFactory.getDecision( decisionName.image );
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    if (jj_2_5(2)) {
                          action = mraFactory.createAction( "_" + name.image );
      label_6:
      while (true) {
        a = Attribute();
                                          action.addAttribute( a );
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        actionName = jj_consume_token(NAME);
                          action = mraFactory.getAction( actionName.image );
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLOSE);
                //System.err.println( name + ", " + decision + ", " + exp );

                if( decision != null) {if (true) return mraFactory.createBehaviour( name.image, action, decision );}
                {if (true) return mraFactory.createBehaviour( name.image, action, exp );}
    throw new Error("Missing return statement in function");
  }

  final public Attribute Attribute() throws ParseException {
        Token name;
        Object val;
    name = jj_consume_token(NAME);
    jj_consume_token(ATT_SEP);
    if (jj_2_6(2)) {
      val = Function();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN:
        val = Expression();
        break;
      case NUMBER:
      case LETTER:
      case NAME:
      case QUOTEDSTR:
        val = StringTerm();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return new Attribute( name.image, val );}
    throw new Error("Missing return statement in function");
  }

  final public Channel Channel() throws ParseException {
        Token name;
        Channel c;
        Attribute a;
        TemporalEvent e;
    jj_consume_token(CHANNEL_HEAD);
    name = jj_consume_token(NAME);
         // System.out.println( "Channel: " + name );
                c = mraFactory.createChannel( name.image );
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN:
      case NAME:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        a = Attribute();
                  c.addAttribute( a );
        break;
      case OPEN:
        e = TemporalEvent();
                  c.addEvent( e );
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLOSE);
          //System.out.println( "Close Channel" );
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Unit Unit() throws ParseException {
        Token type;
        Unit unit;
        Vector<String> params;
        Attribute att;
    jj_consume_token(OPEN);
    type = jj_consume_token(NAME);
          //System.out.println( "Unit: " + type );
                unit = mraFactory.createTypedUnit( type.image );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATT_SEP:
      jj_consume_token(ATT_SEP);
      params = ParameterList();
                  unit.setAttributes( params );
      break;
    default:
      jj_la1[19] = jj_gen;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        att = Attribute();
                                      unit.addAttribute( att );
      }
    }
    jj_consume_token(CLOSE);
          {if (true) return unit;}
    throw new Error("Missing return statement in function");
  }

  final public TemporalEvent TemporalEvent() throws ParseException {
        Token type;
        TemporalEvent event;
        Vector<String> params;
        Attribute att;
    jj_consume_token(OPEN);
    type = jj_consume_token(NAME);
          //System.out.println( "Temporal Event: " + type );
                        event = mraFactory.createTemporalEvent( type.image );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATT_SEP:
      jj_consume_token(ATT_SEP);
      params = ParameterList();
                  event.setAttributes( params );
      break;
    default:
      jj_la1[21] = jj_gen;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        att = Attribute();
                                      event.addAttribute( att );
      }
    }
    jj_consume_token(CLOSE);
          {if (true) return event;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTerm Expression() throws ParseException {
        ExpressionTerm ret=null;
    jj_consume_token(OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONNECTIVE:
      ret = ConnectedExpressions();
      break;
    case NEGATION:
      ret = NegatedExpression();
      break;
    case OPEN:
      ret = Expression();
      break;
    case NUMBER:
    case LETTER:
    case NAME:
    case QUOTEDSTR:
      ret = Term();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CLOSE);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTerm ConnectedExpressions() throws ParseException {
        Token connective;
        List<ExpressionTerm> args = new Vector<ExpressionTerm>();
        ExpressionTerm term;

    connective = jj_consume_token(CONNECTIVE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN:
      term = Expression();
      break;
    case NUMBER:
    case LETTER:
    case NAME:
    case QUOTEDSTR:
      term = Term();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                          args.add( term );
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN:
        term = Expression();
        break;
      case NUMBER:
      case LETTER:
      case NAME:
      case QUOTEDSTR:
        term = Term();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                    args.add(term);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN:
      case NUMBER:
      case LETTER:
      case NAME:
      case QUOTEDSTR:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
    }
                {if (true) return mraFactory.createConnective( connective.image, args );}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTerm NegatedExpression() throws ParseException {
        ExpressionTerm ex;
    jj_consume_token(NEGATION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN:
      ex = Expression();
      break;
    case NUMBER:
    case LETTER:
    case NAME:
    case QUOTEDSTR:
      ex = Term();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return mraFactory.createNegatedExpression( ex );}
    throw new Error("Missing return statement in function");
  }

  final public Function Function() throws ParseException {
        Vector<ExpressionTerm> params = new Vector<ExpressionTerm>();
        @SuppressWarnings("unused") String func;
        Token name;
    name = jj_consume_token(NAME);
    jj_consume_token(OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case LETTER:
    case NAME:
    case QUOTEDSTR:
      params = FunctionParameters();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE);
         {if (true) return  mraFactory.createFunction( name.image, params );}
    throw new Error("Missing return statement in function");
  }

  final public Vector<ExpressionTerm> FunctionParameters() throws ParseException {
        ExpressionTerm term;
        Vector<ExpressionTerm> atts = new Vector<ExpressionTerm>();
    term = Term();
                     atts.add(term);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      term = Term();
                               atts.add(term);
    }
          {if (true) return atts;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<String> ParameterList() throws ParseException {
        String term;
        Vector<String> atts = new Vector<String>();
    term = StringTerm();
                           atts.add(term);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      term = StringTerm();
                                     atts.add(term);
    }
          {if (true) return atts;}
    throw new Error("Missing return statement in function");
  }

  final public String StringTerm() throws ParseException {
        Token val;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTEDSTR:
      val = jj_consume_token(QUOTEDSTR);
      break;
    case NUMBER:
      val = jj_consume_token(NUMBER);
      break;
    case NAME:
      val = jj_consume_token(NAME);
      break;
    case LETTER:
      val = jj_consume_token(LETTER);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        String s = val.image;
                        if( s.startsWith( "\"" ) && s.endsWith( "\"" ) )
                        {
                                s = s.substring( 1, s.length() - 1 );
                        }
                        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTerm Term() throws ParseException {
        String val;
        Function fun;
    if (jj_2_7(2)) {
      fun = Function();
                  {if (true) return fun;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case LETTER:
      case NAME:
      case QUOTEDSTR:
        val = StringTerm();
                  {if (true) return mraFactory.getTerm( val );}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_3_5() {
    Token xsp;
    if (jj_3R_16()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(CHANNEL_HEAD)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    if (jj_3R_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(OPEN)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(ATT_SEP)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(SECTION_OPEN)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  public MRAParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xba00000,0xb200000,0x6200000,0x6200000,0x10000000,0x800000,0x800000,0x10800000,0x16a00100,0x20260080,0x200000,0x80,0x200000,0x200000,0x200000,0x20260080,0x200080,0x200080,0x200000,0x200,0x200000,0x200,0x20266080,0x20260080,0x20260080,0x20260080,0x20260080,0x20260000,0x1000,0x1000,0x20260000,0x20260000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public MRAParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public MRAParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MRAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MRAParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MRAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MRAParser(MRAParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(MRAParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[30];
    for (int i = 0; i < 30; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
